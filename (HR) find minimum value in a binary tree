#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Define the structure for a tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function to create a new tree node
Node* newNode(int data) {
    if (data == -1) return NULL;
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
    return node;
}

// Function to build the binary tree from level-order traversal
Node* buildTree(int arr[], int n) {
    if (n == 0 || arr[0] == -1) return NULL;

    Node** nodes = (Node**)malloc(n * sizeof(Node*));
    for (int i = 0; i < n; i++) {
        nodes[i] = newNode(arr[i]);
    }

    int i = 0;
    for (int j = 1; j < n; ) {
        if (nodes[i] != NULL) {
            if (j < n) nodes[i]->left = nodes[j++];
            if (j < n) nodes[i]->right = nodes[j++];
        }
        i++;
    }

    Node* root = nodes[0];
    free(nodes);
    return root;
}

// Function to find the minimum value in the binary tree
int findMin(Node* root) {
    if (root == NULL) return INT_MAX;
    int leftMin = findMin(root->left);
    int rightMin = findMin(root->right);
    int currentMin = root->data;
    if (leftMin < currentMin) currentMin = leftMin;
    if (rightMin < currentMin) currentMin = rightMin;
    return currentMin;
}

int main() {
    int N;
    scanf("%d", &N);
    int arr[N];
    for (int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }
    Node* root = buildTree(arr, N);
    int minValue = findMin(root);
    printf("%d\n", minValue);
    return 0;
}
